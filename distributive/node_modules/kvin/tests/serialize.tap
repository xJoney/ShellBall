/**
 * @file        serialize.tap
 *              Test Kvin's ability to serialize and deserialize different objects.
 *
 * @author      Bryan Hoang <bryan@kingsds.network>
 * @date        Feb. 2020
 */
const { test } = require('zora');

const serializer = require('../kvin');
const { serializeAsync, deserialize } = serializer;

// Ignore security for tests
serializer.makeFunctions = true;

const replacer = (_key, value) =>
  typeof value === 'bigint' || typeof value === 'function'
    ? String(value)
    : value;

const toString = (value) => JSON.stringify(value, replacer);

/**
 * Tests the serialization of different types of values in JS.
 *
 * @param {import('zora').Assert} t
 * @param {*} valueToSerialize
 */
let testSerializingValue = async (t, valueToSerialize) => {
  // Arrange
  const isPrimitive = (value) => {
    return value !== Object(value);
  };

  let { constructor } = valueToSerialize;
  let deserializedValue; // eslint-disable-line prefer-const
  let getTestExpression;
  let constructorName = constructor.name;

  /**
   * Changing the logic for equality in the assertion between the
   * serialized/deserialized values based on their types.
   */
  if (isPrimitive(valueToSerialize)) {
    getTestExpression = () => deserializedValue === valueToSerialize;
  } else {
    /**
     * The original values could be promises, which means we'll have to repeat
     * some of the logic by nesting it in this function.
     */
    getTestExpression = async () => {
      if (constructor === Promise) {
        constructorName = Promise.name;
        valueToSerialize = await valueToSerialize;
        deserializedValue = await deserializedValue;
        ({ constructor } = valueToSerialize);
        constructorName += `<${constructor.name}>`;
      }

      let testExpression;
      if (isPrimitive(valueToSerialize)) {
        testExpression = deserializedValue === valueToSerialize;
      } else {
        testExpression =
          deserializedValue instanceof constructor &&
          typeof deserializedValue === typeof valueToSerialize &&
          toString(deserializedValue) === toString(valueToSerialize);
      }

      return testExpression;
    };
  }

  // Act
  const serializedValue = await serializeAsync(valueToSerialize);
  deserializedValue = deserialize(serializedValue);

  // Assert
  t.ok(
    await getTestExpression(),
    `When a ${constructorName} is serialized (${toString(
      valueToSerialize,
    )}), then it is deserialized to the same ${constructor.name} (${toString(
      deserializedValue,
    )})`,
  );
};

test('Serialize Utility', async (t) => {
  await t.test('Serializing/Deserializing', async (t) => {
    testSerializingValue = testSerializingValue.bind(null, t);
    const url = 'https://www.example.com/';
    const mockArray = [1, '1', true, undefined];
    const testSerializationValues = [
      // Primitives (Unsupported: BigInt, Symbol, undefined, and null)
      // Number
      0,
      // String
      'Hello, World!',
      // Boolean
      true,
      // Non-primitives
      // Object
      { foo: {} },
      // Function
      () => {},
      // URL
      new URL(url),
      // Date
      new Date(),
      // RegExp
      /foo/,
      // Array
      mockArray,
      // Int8Array
      new Int8Array(mockArray),
      // Uint8Array
      new Uint8Array(mockArray),
      // Uint8ClampedArray
      new Uint8ClampedArray(mockArray),
      // Int16Array
      new Int16Array(mockArray),
      // Uint16Array
      new Uint16Array(mockArray),
      // Int32Array
      new Int32Array(mockArray),
      // Uint32Array
      new Uint32Array(mockArray),
      // Float32Array
      new Float32Array(mockArray),
      // Float64Array
      new Float64Array(mockArray),
      // BigInt64Array
      new BigInt64Array([1n, 2n, 3n]),
      // BigUint64Array
      new BigUint64Array([1n, 2n, 3n]),
      // User constructors
    ];

    for (const value of testSerializationValues) {
      testSerializingValue(value);
    }

    // Promises
    const testSerializationValuesPromises = testSerializationValues.map(
      (value) => Promise.resolve(value),
    );

    for (const value of testSerializationValuesPromises) {
      await testSerializingValue(value);
    }
  });
});
